{"version":3,"sources":["components/IconText/IconText.jsx","components/Forecast/Forecast.jsx","components/Toggler/Toggler.jsx","components/Search/Search.jsx","components/Header/Header.jsx","components/Duration/Duration.jsx","components/Time/Time.jsx","components/TodayWeather/TodayWeather.jsx","App.js","index.js"],"names":["iconMap","temperature","className","src","pressure","wind","cloud","humidity","IconText","size","text","icon","cn","Forecast","props","daysArr","length","map","oneDay","thisDay","dt_txt","description","oneStamp","weather","reduce","result","desc","averageCloudPerc","Object","keys","final","currDesc","clouds","all","a","b","averageTemp","main","temp","speed","split","substr","replace","Math","round","Toggler","useContext","ThemeContext","theme","setTheme","changeTheme","fill","xmlns","d","class","for","onClick","version","viewBox","ß","enable-background","Search","setCity","city","search","type","placeholder","onChange","e","target","value","onKeyPress","id","Header","Duration","msToTime","sys","sunrise","sunset","updateTime","callback","Date","toLocaleTimeString","hour","minute","Time","format_date","useState","time","setTime","useEffect","interval","setInterval","clearInterval","TodayWeather","name","feels_like","message","React","createContext","api","App","setWeather","forecast","setForecast","key","document","querySelector","fetch","res","resForecast","json","jsonData","jsonDataForecast","today","setHours","setMinutes","setSeconds","tempDayArray","list","index","timeFrame","getTime","push","getHours","Provider","day","getDay","date","getDate","month","getMonth","year","getFullYear","timestamp","getMinutes","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.887e453d.chunk.js","sourcesContent":["import cn from \"classnames\";\nimport \"./IconText.scss\";\n\nconst iconMap = {\n  temperature: (\n    <img className=\"icon-block__icon\" src=\"/free-icon-temperature.png\" />\n  ),\n  pressure: (\n    <img className=\"icon-block__icon\" src=\"/free-icon-low-tide-4064379.png\" />\n  ),\n  wind: <img className=\"icon-block__icon\" src=\"free-icon-windy.png\" />,\n  cloud: <img className=\"icon-block__icon\" src=\"/free-icon-cloud.png\" />,\n  humidity: <img className=\"icon-block__icon\" src=\"/free-icon-humidity.png\" />,\n};\n\nexport const IconText = ({ className, size, text, icon }) => {\n  return (\n    <div className={cn(className, \"icon-block\", `icon-block--${size}`)}>\n      {iconMap[icon]}\n      <div className=\"icon-block__text\">{text}</div>\n    </div>\n  );\n};\n\n{\n  /* <div className='weather-box__wind wind'>\n    <img src=\"free-icon-windy.png\"/>\n    <div className='wind__info'>ветер {Math.round(weather.wind.speed)} м/с, {Math.round((weather.wind.speed) * 5/9)}°c</div>\n</div>\n\n<div className='weather-box__clouds clouds'>\n    <img src='/free-icon-cloud.png'/>\n    <div className='clouds__info'>облачность {weather.clouds.all}%</div>\n</div>\n\n<div className='weather-box__humidity humidity'>\n    <img src=\"/free-icon-humidity.png\"/>\n    <div className='humidity__info'>влажность {weather.main.humidity}%</div>\n</div> \n\n<div className='forecast__temp'> \n    <img src='/free-icon-temperature.png'></img>\n    <div>{Math.round(averageTemp)} °c</div>\n</div> */\n}\n","import { IconText } from \"../IconText/IconText.jsx\";\nimport \"./Forecast.scss\";\nexport const Forecast = (props) => {\n  const { daysArr } = props;\n  return (\n    <div className=\"forecast\">\n      {daysArr.length > 0 ? (\n        daysArr.map((oneDay) => {\n          const thisDay = oneDay[0].dt_txt;\n          // today\n          // const averageCloudPerc = average(oneDay, 'clouds', 'all' );\n          const description = oneDay\n            .map((oneStamp) => oneStamp.weather[0].description)\n            .reduce(function (result, desc) {\n              if (result[desc]) {\n                result[desc] += 1;\n              } else {\n                result[desc] = 1;\n              }\n              return result;\n            }, {});\n\n          const descr = Object.keys(description).reduce((final, currDesc) => {\n            if (description[final] > description[currDesc]) {\n              return final;\n            }\n            return currDesc;\n          }, \"\");\n\n          const averageCloudPerc =\n            oneDay\n              .map((oneStamp) => oneStamp.clouds.all)\n              .reduce((a, b) => a + b, 0) / oneDay.length;\n          const averageTemp =\n            oneDay\n              .map((oneStamp) => oneStamp.main.temp)\n              .reduce((a, b) => a + b, 0) / oneDay.length;\n          const humidity =\n            oneDay\n              .map((oneStamp) => oneStamp.main.humidity)\n              .reduce((a, b) => a + b, 0) / oneDay.length;\n          const wind =\n            oneDay\n              .map((oneStamp) => oneStamp.wind.speed)\n              .reduce((a, b) => a + b, 0) / oneDay.length;\n          const pressure =\n            oneDay\n              .map((oneStamp) => oneStamp.main.pressure)\n              .reduce((a, b) => a + b, 0) / oneDay.length;\n          return (\n            <div className=\"forecast-box\">\n              <div className=\"forecast__date\">\n                {thisDay.split(\" \")[0].substr(5).replace(\"-\", \".\")}\n              </div>\n              <IconText\n                size=\"small\"\n                icon=\"temperature\"\n                text={`${Math.round(averageTemp)} °c`}\n              />\n              <IconText\n                size=\"small\"\n                icon=\"cloud\"\n                text={`${Math.round(averageCloudPerc)} %`}\n              />\n              <IconText\n                size=\"small\"\n                icon=\"pressure\"\n                text={`${Math.round(pressure * 0.75)} мм`}\n              />\n              <IconText\n                size=\"small\"\n                icon=\"humidity\"\n                text={`${Math.round(humidity)} %`}\n              />\n              <IconText\n                size=\"small\"\n                icon=\"wind\"\n                text={`${Math.round(wind)} м/с`}\n              />\n            </div>\n          );\n        })\n      ) : (\n        <div>сегодня без прогнозов</div>\n      )}\n    </div>\n  );\n};\n","import { ThemeContext } from \"../../App\";\nimport { useContext } from \"react\";\nimport \"./Toggler.scss\";\n\nexport const Toggler = () => {\n  const { theme, setTheme } = useContext(ThemeContext);\n  const changeTheme = () =>\n    theme === \"dark\" ? setTheme(\"light\") : setTheme(\"dark\");\n  return (\n    <div className=\"toggler\">\n      <svg\n        className={\n          theme === \"light\"\n            ? \"toggler__day-icon--light\"\n            : \"toggler__day-icon--dark\"\n        }\n        fill=\"#000000\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        <path d=\"M 11 0 L 11 3 L 13 3 L 13 0 L 11 0 z M 4.2226562 2.8085938 L 2.8085938 4.2226562 L 4.9296875 6.34375 L 6.34375 4.9296875 L 4.2226562 2.8085938 z M 19.777344 2.8085938 L 17.65625 4.9296875 L 19.070312 6.34375 L 21.191406 4.2226562 L 19.777344 2.8085938 z M 12 5 C 8.1458514 5 5 8.1458514 5 12 C 5 15.854149 8.1458514 19 12 19 C 15.854149 19 19 15.854149 19 12 C 19 8.1458514 15.854149 5 12 5 z M 12 7 C 14.773268 7 17 9.2267316 17 12 C 17 14.773268 14.773268 17 12 17 C 9.2267316 17 7 14.773268 7 12 C 7 9.2267316 9.2267316 7 12 7 z M 0 11 L 0 13 L 3 13 L 3 11 L 0 11 z M 21 11 L 21 13 L 24 13 L 24 11 L 21 11 z M 4.9296875 17.65625 L 2.8085938 19.777344 L 4.2226562 21.191406 L 6.34375 19.070312 L 4.9296875 17.65625 z M 19.070312 17.65625 L 17.65625 19.070312 L 19.777344 21.191406 L 21.191406 19.777344 L 19.070312 17.65625 z M 11 21 L 11 24 L 13 24 L 13 21 L 11 21 z\" />\n      </svg>\n      <div class=\"button-con\">\n        <label for=\"toggle-theme\" />\n        <input\n          className=\"toggle\"\n          className={theme === \"light\" ? \"toggle--light\" : \"toggle--dark\"}\n          id=\"toggle-theme\"\n          type=\"checkbox\"\n        />\n        <label\n          className=\"toggle-button\"\n          for=\"toggle-theme\"\n          onClick={() => setTheme(changeTheme)}\n        ></label>\n        <label for=\"toggle-theme\" />\n      </div>\n      <svg\n        className={\n          theme === \"light\"\n            ? \"toggler__night-icon--light\"\n            : \"toggler__night-icon--dark\"\n        }\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox=\"0 0 512 512\"\n        ß\n        enable-background=\"new 0 0 512 512\"\n      >\n        <g>\n          <g>\n            <path d=\"m275.4,500.7c-135,0-244.7-109.8-244.7-244.7 1.06581e-14-134.9 109.8-244.7 244.7-244.7 8.2,0 16.4,0.4 24.6,1.2 7.2,0.7 13.5,5.2 16.5,11.7s2.4,14.2-1.6,20.2c-23,33.8-35.2,73.3-35.2,114.2 0,105 78.7,192.2 183.2,202.6 7.2,0.7 13.5,5.2 16.5,11.7 3.1,6.5 2.4,14.2-1.6,20.2-45.8,67.4-121.4,107.6-202.4,107.6zm-12.5-448c-106.5,6.5-191.2,95.2-191.2,203.3 1.42109e-14,112.3 91.4,203.7 203.7,203.7 56.4,0 109.6-23.4 147.8-63.7-46.2-11.7-88.1-36.8-120.8-72.6-41.1-45.2-63.8-103.6-63.8-164.6 0.1-37.1 8.4-73.2 24.3-106.1z\" />\n          </g>\n        </g>\n      </svg>\n    </div>\n  );\n};\n","import \"./Search.scss\";\nimport { ThemeContext } from \"../../App\";\nimport { useContext } from \"react\";\n\nexport const Search = (props) => {\n  const { theme, setTheme } = useContext(ThemeContext);\n  const { setCity, city, search } = props;\n  return (\n    <div className=\"search\">\n      <input\n        type=\"text\"\n        className={\n          theme === \"light\" ? \"search__bar--light\" : \"search__bar--dark\"\n        }\n        placeholder=\"Ищем погодовое...\"\n        onChange={(e) => setCity(e.target.value)}\n        value={city}\n        onKeyPress={search}\n      />\n      {/* <img className='search__button'\n      onClick={search} \n      src=\"https://image.flaticon.com/icons/svg/49/49116.svg\" \n      alt=\"\"></img> */}\n      <svg\n        className={\n          theme === \"light\" ? \"search__button--light\" : \"search__button--dark\"\n        }\n        onClick={search}\n        enable-background=\"new 0 0 32 32\"\n        id=\"Glyph\"\n        version=\"1.1\"\n        viewBox=\"0 0 32 32\"\n      >\n        <path\n          d=\"M27.414,24.586l-5.077-5.077C23.386,17.928,24,16.035,24,14c0-5.514-4.486-10-10-10S4,8.486,4,14  s4.486,10,10,10c2.035,0,3.928-0.614,5.509-1.663l5.077,5.077c0.78,0.781,2.048,0.781,2.828,0  C28.195,26.633,28.195,25.367,27.414,24.586z M7,14c0-3.86,3.14-7,7-7s7,3.14,7,7s-3.14,7-7,7S7,17.86,7,14z\"\n          id=\"XMLID_223_\"\n        />\n      </svg>\n    </div>\n  );\n};\n","import { Toggler } from \"../Toggler/Toggler\";\nimport { Search } from \"../Search/Search\";\nimport \"./Header.scss\";\nexport const Header = (props) => {\n  const { setCity, search, city } = props;\n  return (\n    <header>\n      <Search setCity={setCity} search={search} city={city} />\n      <Toggler />\n    </header>\n  );\n};\n","import cn from \"classnames\";\nimport \"./Duration.scss\";\nexport const Duration = ({ className, weather, msToTime }) => {\n  return (\n    <div className={cn(className, \"length-day\")}>\n      <div className=\"length-day__sunrise sunrise\">\n        <img className=\"length-day__icon\" src=\"/free-icon-sunrise.png\" />\n        <div>{msToTime(weather.sys.sunrise)}</div>\n      </div>\n      <div className=\"length-day__sunset sunset\">\n        <img className=\"length-day__icon\" src=\"/free-icon-sunset.png\" />\n        <div>{msToTime(weather.sys.sunset)}</div>\n      </div>\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport cn from \"classnames\";\nimport \"./Time.scss\";\n\nconst updateTime = (callback) => {\n  const now = new Date();\n  const currenTime = now.toLocaleTimeString([], {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n  callback(currenTime);\n};\n\nexport const Time = ({ className, format_date }) => {\n  const [time, setTime] = useState(\"\");\n\n  useEffect(() => {\n    updateTime(setTime);\n    const interval = setInterval(() => {\n      updateTime(setTime);\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return (\n    <div className={cn(className, \"time\")}>\n      <div className=\"time-text\">{time}</div>\n      <div className=\"time-date\">{format_date(new Date())}</div>\n    </div>\n  );\n};\n","import cn from \"classnames\";\nimport { Duration } from \"../Duration/Duration\";\nimport { IconText } from \"../IconText/IconText\";\nimport { Time } from \"../Time/Time\";\nimport \"./TodayWeather.scss\";\nexport const TodayWeather = (props) => {\n  const { className, weather, format_date, msToTime } = props;\n  return typeof weather.main !== \"undefined\" ? (\n    <div className={cn(className, \"today-weather\")}>\n      <div className=\"today-weather__main\">\n        <div className=\"today-weather__now weather-now\">\n          <div className=\"today-weather__location\">\n            {weather.name}, {weather.weather[0].description}\n          </div>\n          <div className=\"temperature-box\">\n            <div className=\"weather-now__temp temperature\">\n              <img\n                className=\"temperature__icon\"\n                src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}.png`}\n              />\n              <div className=\"temperature__text\">\n                {Math.round(weather.main.temp)}°c\n              </div>\n            </div>\n            <div className=\"weather-now__feels\">\n              ощущается как {Math.round(weather.main.feels_like)}°c\n            </div>\n          </div>\n        </div>\n\n        <div className=\"today-weather__box weather-box\">\n          <IconText\n            className={\"weather-box__elem\"}\n            size=\"large\"\n            icon=\"pressure\"\n            text={`${Math.round(weather.main.pressure * 0.75)} мм`}\n          />\n          <IconText\n            className={\"weather-box__elem\"}\n            size=\"large\"\n            icon=\"cloud\"\n            text={`${weather.clouds.all}%`}\n          />\n          <IconText\n            className={\"weather-box__elem\"}\n            size=\"large\"\n            icon=\"humidity\"\n            text={`${weather.main.humidity}%`}\n          />\n          <IconText\n            className={\"weather-box__elem\"}\n            size=\"large\"\n            icon=\"wind\"\n            text={`${Math.round(weather.wind.speed)} м/с, ${Math.round(\n              (weather.wind.speed * 5) / 9\n            )}°c`}\n          />\n        </div>\n      </div>\n\n      <div className=\"today-weather__secondary\">\n        <Time format_date={format_date} className=\"today-weather__time\" />\n        <Duration msToTime={msToTime} weather={weather} />\n      </div>\n    </div>\n  ) : weather.message === \"city not found\" ? (\n    <div className=\"start\">ошибка</div>\n  ) : (\n    <div className=\"start\"></div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport cn from \"classnames\";\nimport { Forecast } from \"./components/Forecast/Forecast\";\nimport { Header } from \"./components/Header/Header\";\nimport { TodayWeather } from \"./components/TodayWeather/TodayWeather\";\nimport \"./App.scss\";\n\nexport const ThemeContext = React.createContext();\n\nconst api = {\n  key: \"7ec4c505607b4b73c0ba74beffef58ca\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [city, setCity] = useState(\"\");\n  const [weather, setWeather] = useState({});\n  const [forecast, setForecast] = useState({});\n  const [theme, setTheme] = useState(\"light\");\n\n  const search = async (e) => {\n    if (\n      e.key === \"Enter\" ||\n      e.target === document.querySelector(\".search__button--light\") ||\n      e.target === document.querySelector(\".search__button--dark\")\n    ) {\n      const res = await fetch(\n        `${api.base}weather?q=${city}&units=metric&lang=ru&appid=${api.key}`\n      );\n      const resForecast = await fetch(\n        `${api.base}forecast?q=${city}&units=metric&lang=ru&appid=${api.key}`\n      );\n      const jsonData = await res.json();\n      const jsonDataForecast = await resForecast.json();\n      setWeather(jsonData);\n      setForecast(jsonDataForecast);\n      setCity(\"\");\n    }\n  };\n\n  useEffect(async () => {\n    const res = await fetch(\n      `${api.base}weather?q=Москва&units=metric&lang=ru&appid=${api.key}`\n    );\n    const resForecast = await fetch(\n      `${api.base}forecast?q=Москва&units=metric&lang=ru&appid=${api.key}`\n    );\n    const jsonData = await res.json();\n    const jsonDataForecast = await resForecast.json();\n    setWeather(jsonData);\n    setForecast(jsonDataForecast);\n    setCity(\"Москва\");\n  }, []);\n\n  const format_date = (d) => {\n    let months = [\n      \"янв\",\n      \"фев\",\n      \"мар\",\n      \"апр\",\n      \"мая\",\n      \"июн\",\n      \"июл\",\n      \"авг\",\n      \"сен\",\n      \"окт\",\n      \"ноя\",\n      \"дек\",\n    ];\n    let days = [\"вс,\", \"пн,\", \"вт,\", \"ср,\", \"чт,\", \"пт,\", \"сб,\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  function msToTime(timestamp) {\n    let date = new Date(timestamp * 1000);\n    let hours = date.getHours() < 10 ? \"0\" + date.getHours() : date.getHours();\n    let minutes =\n      date.getMinutes() < 10 ? \"0\" + date.getMinutes() : date.getMinutes();\n    let time = hours + \":\" + minutes;\n    return time;\n  }\n\n  const today = new Date();\n  today.setHours(23);\n  today.setMinutes(59);\n  today.setSeconds(59);\n\n  const daysArr = [];\n  let tempDayArray = [];\n  if (forecast && forecast.list && forecast.list.length > 0) {\n    for (let index = 0; index < forecast.list.length; index++) {\n      const timeFrame = forecast.list[index];\n      const thisStamp = new Date(timeFrame.dt_txt);\n      if (thisStamp.getTime() < today.getTime()) {\n        tempDayArray.push(timeFrame);\n      } else {\n        today.setHours(today.getHours() + 24);\n        daysArr.push(tempDayArray);\n        tempDayArray = [];\n        tempDayArray.push(timeFrame);\n      }\n    }\n    if (tempDayArray.length > 0) {\n      daysArr.push(tempDayArray);\n    }\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      <div className={`theme--${theme}`}>\n        <div className={\"weather-app\"}>\n          <Header setCity={setCity} search={search} city={city} />\n          <TodayWeather\n            className=\"weather-app__today\"\n            weather={weather}\n            format_date={format_date}\n            msToTime={msToTime}\n          />\n          <Forecast daysArr={daysArr} />\n        </div>\n      </div>\n    </ThemeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}